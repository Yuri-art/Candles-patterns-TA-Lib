import warnings
import itertools
import time
import os
import pandas as pd
import numpy as np
import talib
import requests
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from mplfinance.original_flavor import candlestick_ohlc
from datetime import datetime
from itertools import compress
from scipy.signal import argrelextrema

warnings.filterwarnings("ignore", category=FutureWarning)

# üìå –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–µ–±—É–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
MIN_ACCURACY_THRESHOLD = 60.0  # % –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è —É—á–µ—Ç–∞ –≤ –æ—Ü–µ–Ω–∫–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
MIN_PREDICTIONS_COUNT = 3  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π

# üìå –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è - –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞
EXTREMA_ORDER_VALUES = [50, 100, 150]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
MIN_LEVEL_TOUCHES_VALUES = [3, 5, 7]  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Å–∞–Ω–∏–π —É—Ä–æ–≤–Ω—è –¥–ª—è –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
LEVEL_TOUCH_THRESHOLD_VALUES = [0.5, 1.0, 1.5]  # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç —É—Ä–æ–≤–Ω—è, —Å—á–∏—Ç–∞—é—â–∏–π—Å—è –∫–∞—Å–∞–Ω–∏–µ–º (–≤ %)

# –ü–∞—Ä–∞–º–µ—Ç—Ä –±–ª–∏–∑–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∫ —É—Ä–æ–≤–Ω—é - –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞
LEVEL_PROXIMITY_THRESHOLD_VALUES = [2.0, 3.0]  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (%)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ã—á—å–∏—Ö –∏ –º–µ–¥–≤–µ–∂—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ - –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞
TARGET_PERCENT_VALUES = [3.0, 4.0]  # –¶–µ–ª–µ–≤–æ–π —Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ (%)
STOP_PERCENT_VALUES = [1.0, 1.5]  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ (%)


# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ETH/USDT —Å Binance
def get_binance_klines(symbol='ETHUSDT', interval='1h', start_date='2024-08-01'):
    base_url = "https://api.binance.com/api/v3/klines"
    start_time = int(datetime.strptime(start_date, "%Y-%m-%d").timestamp() * 1000)
    end_time = int(datetime.now().timestamp() * 1000)
    limit = 1000

    all_data = []

    while start_time < end_time:
        params = {
            "symbol": symbol,
            "interval": interval,
            "startTime": start_time,
            "endTime": end_time,
            "limit": limit
        }
        response = requests.get(base_url, params=params)
        data = response.json()

        if not data:
            break

        all_data.extend(data)
        start_time = data[-1][0] + 1
        time.sleep(0.5)

    return all_data


# üìå –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞–º
def find_extreme_levels(data, order, min_touches, touch_threshold):
    prices = data['close'].values
    max_idx = argrelextrema(prices, np.greater, order=order)[0]
    min_idx = argrelextrema(prices, np.less, order=order)[0]

    resistance_levels = [(data.iloc[i]['close'], data.iloc[i]['time']) for i in max_idx]
    support_levels = [(data.iloc[i]['close'], data.iloc[i]['time']) for i in min_idx]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Å–∞–Ω–∏–π
    support_levels = [(level, time) for level, time in support_levels
                      if (data['close'] - level).abs().lt(level * touch_threshold / 100).sum() >= min_touches]
    resistance_levels = [(level, time) for level, time in resistance_levels
                         if (data['close'] - level).abs().lt(level * touch_threshold / 100).sum() >= min_touches]

    return support_levels, resistance_levels


# üìå –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —É—Ä–æ–≤–Ω–µ–π
def check_pattern_levels(price, time, support_levels, resistance_levels, level_proximity_threshold):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
    results = {
        'standard_bull': False,  # –ë—ã—á–∏–π —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        'standard_bear': False,  # –ú–µ–¥–≤–µ–∂–∏–π —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        'logical_bull': False,  # –ë—ã—á–∏–π —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        'logical_bear': False  # –ú–µ–¥–≤–µ–∂–∏–π —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è)
    for level, level_time in support_levels:
        if abs(price - level) / price < level_proximity_threshold / 100 and time > level_time:
            results['standard_bull'] = True  # –î–ª—è –±—ã—á—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            results['logical_bear'] = True  # –î–ª—è –º–µ–¥–≤–µ–∂—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            break

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É —É—Ä–æ–≤–Ω–µ–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è)
    for level, level_time in resistance_levels:
        if abs(price - level) / price < level_proximity_threshold / 100 and time > level_time:
            results['standard_bear'] = True  # –î–ª—è –º–µ–¥–≤–µ–∂—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            results['logical_bull'] = True  # –î–ª—è –±—ã—á—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            break

    return results


# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
def analyze_pattern_performance(data, pattern_row, pattern_type, target_percent, stop_percent):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã

    Args:
        data (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        pattern_row (pd.Series): –°—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
        pattern_type (str): –¢–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (Bull, L_Bull, Bear, L_Bear)
        target_percent (float): –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–æ—Å—Ç–∞/–ø–∞–¥–µ–Ω–∏—è
        stop_percent (float): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ

    Returns:
        bool: True –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    # –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
    pattern_idx = pattern_row.name

    # –¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    pattern_price = pattern_row['close']

    # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–¥–æ –∫–æ–Ω—Ü–∞ DataFrame)
    future_data = data.loc[pattern_idx + 1:]

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –Ω–µ—É—Å–ø–µ—à–Ω—ã–º
    if future_data.empty:
        return False

    # –î–ª—è –±—ã—á—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (Bull –∏ L_Bull)
    if "Bull" in pattern_type:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–æ—Å—Ç –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –Ω–µ –±—ã–ª–æ –ª–∏ –ø–∞–¥–µ–Ω–∏—è –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
        min_price_threshold = pattern_price * (1 - stop_percent / 100)  # -X%
        target_price = pattern_price * (1 + target_percent / 100)  # +Y%

        # –î–ª—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        for idx, row in future_data.iterrows():
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç - —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            if row['low'] < min_price_threshold:
                return False

            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç - —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            if row['high'] >= target_price:
                return True

    # –î–ª—è –º–µ–¥–≤–µ–∂—å–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (Bear –∏ L_Bear)
    elif "Bear" in pattern_type:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø–∞–¥–µ–Ω–∏–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –Ω–µ –±—ã–ª–æ –ª–∏ —Ä–æ—Å—Ç–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
        max_price_threshold = pattern_price * (1 + stop_percent / 100)  # +X%
        target_price = pattern_price * (1 - target_percent / 100)  # -Y%

        # –î–ª—è –∫–∞–∂–¥–æ–π —Å–≤–µ—á–∏ –ø–æ—Å–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
        for idx, row in future_data.iterrows():
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç - —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            if row['high'] > max_price_threshold:
                return False

            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç - —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            if row['low'] <= target_price:
                return True

    # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
    return False


# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
def calculate_average_accuracy(pattern_stats):
    total_success = 0
    total_patterns = 0

    for pattern_type, stats in pattern_stats.items():
        if stats['total'] > 0:
            total_success += stats['success']
            total_patterns += stats['total']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    if total_patterns >= MIN_PREDICTIONS_COUNT:
        return (total_success / total_patterns) * 100, total_patterns
    else:
        return 0, total_patterns  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏


# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
def process_crypto_data(data, extrema_order, min_touches, touch_threshold,
                        level_proximity_threshold, target_percent, stop_percent):
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã
    crypto = data.copy()

    # üìå –ù–∞—Ö–æ–¥–∏–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    support_levels, resistance_levels = find_extreme_levels(
        crypto, extrema_order, min_touches, touch_threshold
    )

    # üìå –û—á–∏—â–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
    crypto['standard_pattern'] = False
    crypto['logical_pattern'] = False
    crypto['pattern_type'] = ""

    # üìå –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    for index, row in crypto.iterrows():
        if row['candlestick_pattern']:
            check_results = check_pattern_levels(
                row['close'],
                row['time'],
                support_levels,
                resistance_levels,
                level_proximity_threshold
            )

            is_bull = "_Bull" in row['candlestick_pattern']
            is_bear = "_Bear" in row['candlestick_pattern']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if (is_bull and check_results['standard_bull']) or (is_bear and check_results['standard_bear']):
                crypto.at[index, 'standard_pattern'] = True
                crypto.at[index, 'pattern_type'] = "standard"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            elif (is_bull and check_results['logical_bull']):
                crypto.at[index, 'logical_pattern'] = True
                crypto.at[index, 'pattern_type'] = "logical_bull"

            elif (is_bear and check_results['logical_bear']):
                crypto.at[index, 'logical_pattern'] = True
                crypto.at[index, 'pattern_type'] = "logical_bear"

    # üìå –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    all_filtered_patterns = crypto[(crypto['standard_pattern']) | (crypto['logical_pattern'])]

    # üìå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    results_by_candle = {}

    # üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø —Å–≤–µ—á–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    for candle in candle_names:
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        pattern_data = all_filtered_patterns[all_filtered_patterns['candlestick_pattern'].str.contains(candle)]

        if not pattern_data.empty:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            pattern_stats = {
                'Bull': {'total': 0, 'success': 0},
                'Bear': {'total': 0, 'success': 0},
                'L_Bull': {'total': 0, 'success': 0},
                'L_Bear': {'total': 0, 'success': 0}
            }

            # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            for index, row in pattern_data.iterrows():
                pattern_type = ""

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                if row['pattern_type'] == "standard":
                    if "_Bull" in row['candlestick_pattern']:
                        pattern_type = "Bull"
                    else:
                        pattern_type = "Bear"
                elif row['pattern_type'] == "logical_bull":
                    pattern_type = "L_Bull"
                elif row['pattern_type'] == "logical_bear":
                    pattern_type = "L_Bear"

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                pattern_stats[pattern_type]['total'] += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                if analyze_pattern_performance(crypto, row, pattern_type, target_percent, stop_percent):
                    pattern_stats[pattern_type]['success'] += 1

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
            avg_accuracy, total_predictions = calculate_average_accuracy(pattern_stats)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Å–≤–µ—á–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            results_by_candle[candle] = {
                'pattern_stats': pattern_stats,
                'avg_accuracy': avg_accuracy,
                'total_predictions': total_predictions,
                'pattern_data': pattern_data
            }

    return {
        'support_levels': support_levels,
        'resistance_levels': resistance_levels,
        'results_by_candle': results_by_candle
    }


# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def create_and_save_chart(crypto, candle, pattern_data, pattern_stats, avg_accuracy,
                          support_levels, resistance_levels, params, output_folder, total_predictions):
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    # –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    if avg_accuracy >= MIN_ACCURACY_THRESHOLD and total_predictions >= MIN_PREDICTIONS_COUNT:
        try:
            fig, ax = plt.subplots(figsize=(15, 9))

            ohlc = crypto[['time_num', 'open', 'high', 'low', 'close']].values
            candlestick_ohlc(ax, ohlc, width=0.0008, colorup='g', colordown='r')

            # üìå –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∑–µ–ª–µ–Ω—ã–µ) –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–∫—Ä–∞—Å–Ω—ã–µ)
            for level, level_time in support_levels:
                ax.axhline(level, linestyle='--', color='green', alpha=0.6)
                ax.text(crypto['time_num'].iloc[-1], level, f"{level:.2f} ({level_time})", fontsize=10, color='blue')

            for level, level_time in resistance_levels:
                ax.axhline(level, linestyle='--', color='red', alpha=0.6)
                ax.text(crypto['time_num'].iloc[-1], level, f"{level:.2f} ({level_time})", fontsize=10, color='blue')

            # üìå –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            for index, row in pattern_data.iterrows():
                x = row['time_num']
                y_max = crypto['high'].max()
                y_min = crypto['low'].min()

                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
                if row['pattern_type'] == "standard":
                    if "_Bull" in row['candlestick_pattern']:
                        ax.axvline(x, color='green', linestyle='--', alpha=0.7)
                        ax.text(x, y_max * 1.05, "Bull", color='green', fontsize=10, rotation=90,
                                verticalalignment='bottom')
                    else:
                        ax.axvline(x, color='red', linestyle='--', alpha=0.7)
                        ax.text(x, y_min * 0.95, "Bear", color='red', fontsize=10, rotation=90, verticalalignment='top')

                # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –±—ã—á—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (—Å–∏–Ω–∏–µ)
                elif row['pattern_type'] == "logical_bull":
                    ax.axvline(x, color='blue', linestyle='--', alpha=0.7)
                    ax.text(x, y_max * 1.05, "L_Bull", color='blue', fontsize=10, rotation=90,
                            verticalalignment='bottom')

                # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –º–µ–¥–≤–µ–∂—å–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—á–µ—Ä–Ω—ã–µ)
                elif row['pattern_type'] == "logical_bear":
                    ax.axvline(x, color='black', linestyle='--', alpha=0.7)
                    ax.text(x, y_min * 0.95, "L_Bear", color='black', fontsize=10, rotation=90, verticalalignment='top')

            # üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            ax.xaxis.set_major_locator(mdates.AutoDateLocator())
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d %H:%M'))
            plt.xticks(rotation=45)

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            plt.title(f"ETH/USDT - {candle} | –¢–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.1f}% | –ü—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_predictions} | " +
                      f"Ext:{params['extrema_order']} Touch:{params['min_touches']} " +
                      f"Prox:{params['level_proximity_threshold']}% Tgt:{params['target_percent']}%")

            plt.xlabel("Time")
            plt.ylabel("Price")
            plt.grid(True)

            # üìå –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤–Ω–∏–∑—É –≥—Ä–∞—Ñ–∏–∫–∞
            stats_text = f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –≠–∫—Å—Ç—Ä–µ–º—É–º—ã {params['extrema_order']} —Å–≤–µ—á–µ–π, –ú–∏–Ω. –∫–∞—Å–∞–Ω–∏–π {params['min_touches']}, " + \
                         f"–ü–æ—Ä–æ–≥ –∫–∞—Å–∞–Ω–∏—è {params['touch_threshold']}%, –ë–ª–∏–∑–æ—Å—Ç—å –∫ —É—Ä–æ–≤–Ω—é {params['level_proximity_threshold']}%, " + \
                         f"–¶–µ–ª—å {params['target_percent']}%, –°—Ç–æ–ø {params['stop_percent']}%\n\n"

            stats_text += f"–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {avg_accuracy:.1f}% (–Ω–∞ –æ—Å–Ω–æ–≤–µ {total_predictions} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤)\n"
            stats_text += f"–ú–∏–Ω. —Ç—Ä–µ–±—É–µ–º–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {MIN_ACCURACY_THRESHOLD}%, –ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {MIN_PREDICTIONS_COUNT}\n"
            stats_text += "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:\n"

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            for pattern_type, stats in pattern_stats.items():
                if stats['total'] > 0:
                    success_rate = (stats['success'] / stats['total']) * 100
                    stats_text += f"{pattern_type}: {stats['success']}/{stats['total']} ({success_rate:.1f}%)\n"
                else:
                    stats_text += f"{pattern_type}: 0/0 (0.0%)\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º
            plt.figtext(0.5, 0.01, stats_text, ha='center', fontsize=12,
                        bbox=dict(facecolor='lightgray', alpha=0.5, boxstyle='round,pad=0.5'))

            plt.tight_layout(rect=[0, 0.13, 1, 1])  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –≤–∫–ª—é—á–∞—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            safe_candle_name = candle.replace("/", "_").replace("\\", "_")
            filename = f"{safe_candle_name}_acc{avg_accuracy:.1f}_pred{total_predictions}_ext{params['extrema_order']}" + \
                       f"_touch{params['min_touches']}_th{params['touch_threshold']}" + \
                       f"_prox{params['level_proximity_threshold']}_tgt{params['target_percent']}_stop{params['stop_percent']}.png"

            # üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.savefig(f"{output_folder}/{filename}")
            plt.close()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if os.path.exists(f"{output_folder}/{filename}"):
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –≥—Ä–∞—Ñ–∏–∫: {filename}")
                return True  # –ì—Ä–∞—Ñ–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {filename}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ {candle}: {str(e)}")
            return False

    return False  # –ì—Ä–∞—Ñ–∏–∫ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π


# üìå –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
def optimize_parameters():
    print("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")

    # üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    raw_data = get_binance_klines()

    # üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time',
               'quote_av', 'trades', 'tb_base_av', 'tb_quote_av', 'ignore']
    crypto = pd.DataFrame(raw_data, columns=columns)

    # üìå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
    crypto['timestamp'] = pd.to_datetime(crypto['timestamp'], unit='ms')
    crypto = crypto[['timestamp', 'open', 'high', 'low', 'close', 'volume']]
    crypto[['open', 'high', 'low', 'close', 'volume']] = crypto[['open', 'high', 'low', 'close', 'volume']].astype(
        float)

    # üìå –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É Asia/Singapore
    crypto.set_index('timestamp', inplace=True)
    crypto.index = crypto.index.tz_localize('UTC').tz_convert('Asia/Singapore')

    # üìå –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
    crypto.reset_index(inplace=True)
    crypto.columns = ['time', 'open', 'high', 'low', 'close', 'volume']

    # üìå –î–æ–±–∞–≤–ª—è–µ–º `time_num` –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    crypto['time_num'] = mdates.date2num(crypto['time'])

    # üìå –ê–Ω–∞–ª–∏–∑ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å TA-Lib
    global candle_names
    candle_names = talib.get_function_groups()['Pattern Recognition']

    # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    removed = ['CDLCOUNTERATTACK', 'CDLLONGLINE', 'CDLSHORTLINE', 'CDLSTALLEDPATTERN', 'CDLKICKINGBYLENGTH']
    candle_names = [name for name in candle_names if name not in removed]

    # üìå –†–∞—Å—á–µ—Ç —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    op, hi, lo, cl = crypto['open'], crypto['high'], crypto['low'], crypto['close']

    for candle in candle_names:
        crypto[candle] = getattr(talib, candle)(op, hi, lo, cl)

    crypto.fillna(0, inplace=True)

    # üìå –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    crypto['candlestick_pattern'] = ""
    crypto['candlestick_match_count'] = 0

    # üìå –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    for index, row in crypto.iterrows():
        detected_patterns = list(compress(row[candle_names].keys(), row[candle_names].values != 0))

        if len(detected_patterns) > 0:
            best_pattern = detected_patterns[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            label = "_Bull" if row[best_pattern] > 0 else "_Bear"
            crypto.at[index, 'candlestick_pattern'] = best_pattern + label
            crypto.at[index, 'candlestick_match_count'] = len(detected_patterns)

    # üìå –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_folder = 'output/optimized_charts'
    os.makedirs(output_folder, exist_ok=True)

    # üìå –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_combinations = (len(EXTREMA_ORDER_VALUES) * len(MIN_LEVEL_TOUCHES_VALUES) *
                          len(LEVEL_TOUCH_THRESHOLD_VALUES) * len(LEVEL_PROXIMITY_THRESHOLD_VALUES) *
                          len(TARGET_PERCENT_VALUES) * len(STOP_PERCENT_VALUES))

    saved_charts = 0
    best_accuracy = 0
    best_params = {}

    print(f"–í—Å–µ–≥–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä–∞: {total_combinations}")
    start_time = time.time()

    # üìå –°–æ–∑–¥–∞–µ–º CSV-—Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_file = f"{output_folder}/optimization_results.csv"
    with open(results_file, 'w') as f:
        f.write("extrema_order,min_touches,touch_threshold,level_proximity_threshold," +
                "target_percent,stop_percent,candle_name,avg_accuracy,total_predictions\n")

    # üìå –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    combination_counter = 0
    for extrema_order in EXTREMA_ORDER_VALUES:
        for min_touches in MIN_LEVEL_TOUCHES_VALUES:
            for touch_threshold in LEVEL_TOUCH_THRESHOLD_VALUES:
                for level_proximity_threshold in LEVEL_PROXIMITY_THRESHOLD_VALUES:
                    for target_percent in TARGET_PERCENT_VALUES:
                        for stop_percent in STOP_PERCENT_VALUES:
                            combination_counter += 1

                            # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            if combination_counter % 10 == 0 or combination_counter == 1:
                                elapsed_time = time.time() - start_time
                                eta = (elapsed_time / combination_counter) * (total_combinations - combination_counter)
                                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {combination_counter}/{total_combinations} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π " +
                                      f"({combination_counter / total_combinations * 100:.1f}%) | " +
                                      f"–ü—Ä–æ—à–ª–æ: {elapsed_time / 60:.1f} –º–∏–Ω | " +
                                      f"–û—Å—Ç–∞–ª–æ—Å—å: {eta / 60:.1f} –º–∏–Ω | " +
                                      f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {saved_charts}")

                            # –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                            params = {
                                'extrema_order': extrema_order,
                                'min_touches': min_touches,
                                'touch_threshold': touch_threshold,
                                'level_proximity_threshold': level_proximity_threshold,
                                'target_percent': target_percent,
                                'stop_percent': stop_percent
                            }

                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                            results = process_crypto_data(
                                crypto,
                                extrema_order,
                                min_touches,
                                touch_threshold,
                                level_proximity_threshold,
                                target_percent,
                                stop_percent
                            )

                            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–µ—á–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è
                            for candle, candle_results in results['results_by_candle'].items():
                                avg_accuracy = candle_results['avg_accuracy']
                                total_predictions = candle_results['total_predictions']

                                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV
                                with open(results_file, 'a') as f:
                                    f.write(f"{extrema_order},{min_touches},{touch_threshold}," +
                                            f"{level_proximity_threshold},{target_percent},{stop_percent}," +
                                            f"{candle},{avg_accuracy:.1f},{total_predictions}\n")

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤—ã—Å–æ–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                                # –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
                                if avg_accuracy >= MIN_ACCURACY_THRESHOLD and total_predictions >= MIN_PREDICTIONS_COUNT:
                                    chart_saved = create_and_save_chart(
                                        crypto,
                                        candle,
                                        candle_results['pattern_data'],
                                        candle_results['pattern_stats'],
                                        avg_accuracy,
                                        results['support_levels'],
                                        results['resistance_levels'],
                                        params,
                                        output_folder,
                                        total_predictions
                                    )

                                    if chart_saved:
                                        saved_charts += 1
                                        print(f"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è {combination_counter}/{total_combinations}: " +
                                              f"‚úÖ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≥—Ä–∞—Ñ–∏–∫ {saved_charts} –¥–ª—è {candle} " +
                                              f"(—Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.1f}%, –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_predictions}, " +
                                              f"–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ext={params['extrema_order']}, touch={params['min_touches']}, " +
                                              f"th={params['touch_threshold']}, prox={params['level_proximity_threshold']}, " +
                                              f"tgt={params['target_percent']}, stop={params['stop_percent']})")
                                    else:
                                        print(f"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è {combination_counter}/{total_combinations}: " +
                                              f"‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {candle} " +
                                              f"(—Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.1f}%, –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {total_predictions})")

                                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                                    if avg_accuracy > best_accuracy:
                                        best_accuracy = avg_accuracy
                                        best_params = {
                                            'candle': candle,
                                            **params
                                        }

    # üìå –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_time = time.time() - start_time
    print(f"\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {total_combinations}")
    print(
        f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é >= {MIN_ACCURACY_THRESHOLD}% –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ >= {MIN_PREDICTIONS_COUNT}: {saved_charts}")
    print(f"–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time / 60:.1f} –º–∏–Ω—É—Ç")

    if best_params:
        print(f"\n–õ—É—á—à–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        print(f"–°–≤–µ—á–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: {best_params['candle']}")
        print(f"–ü–µ—Ä–∏–æ–¥ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤: {best_params['extrema_order']}")
        print(f"–ú–∏–Ω. –∫–∞—Å–∞–Ω–∏–π —É—Ä–æ–≤–Ω—è: {best_params['min_touches']}")
        print(f"–ü–æ—Ä–æ–≥ –∫–∞—Å–∞–Ω–∏—è: {best_params['touch_threshold']}%")
        print(f"–ë–ª–∏–∑–æ—Å—Ç—å –∫ —É—Ä–æ–≤–Ω—é: {best_params['level_proximity_threshold']}%")
        print(f"–¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç: {best_params['target_percent']}%")
        print(f"–°—Ç–æ–ø-–ø—Ä–æ—Ü–µ–Ω—Ç: {best_params['stop_percent']}%")
        print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {best_accuracy:.1f}%")

    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π CSV —Å —Ç–æ–ø-10 –ª—É—á—à–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    try:
        results_df = pd.read_csv(results_file)
        top_results = results_df.sort_values('avg_accuracy', ascending=False).head(10)
        top_file = f"{output_folder}/top10_combinations.csv"
        top_results.to_csv(top_file, index=False)
        print(f"\n–¢–æ–ø-10 –ª—É—á—à–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {top_file}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å —Ç–æ–ø-10 –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {e}")

    return best_params, best_accuracy


# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    optimize_parameters()